#! /home/yketa/miniconda3/bin/python3.6

import os
import sys

import math

import gsd
import gsd.hoomd
import gsd.pygsd

import numpy as np

import pickle

sys.path.append('/home/yketa')
from exponents import float_to_letters
sys.path.append('/home/yketa/hoomd/colmig_DPD_P_A/data')
from readdat import *

from collections import OrderedDict

data_dir = os.environ['DATA_DIRECTORY'] if 'DATA_DIRECTORY' in os.environ else os.getcwd() # data directory

wrap_file_name = os.environ['WRAPPED_FILE'] if 'WRAPPED_FILE' in os.environ else data_dir + '/trajectory.gsd' # wrapped trajectory file (.gsd)
unwrap_file_name = os.environ['UNWRAPPED_FILE'] if 'UNWRAPPED_FILE' in os.environ else data_dir + '/trajectory.dat' # unwrapped trajectory file (binary)
parameters_file = os.environ['PARAMETERS_FILE'] if 'PARAMETERS_FILE' in os.environ else data_dir + '/param.pickle' # parameters file

dis_time = int(eval(os.environ['TIME'])) if 'TIME' in os.environ else -1 # time interval for the displacement

init_frame = int(eval(os.environ['INITIAL_FRAME'])) if 'INITIAL_FRAME' in os.environ else -1 # initial time for the calculation of the displacement correlation
int_max = int(eval(os.environ['INTERVAL_MAXIMUM'])) if 'INTERVAL_MAXIMUM' in os.environ else 1 # maximum number of intervals taken for the calculation of the displacement correlation

with open(parameters_file, 'rb') as param_file:
	N, a, pdi, N_sizes, density, box_size, kT, mu, k, vzero, dr, damp_bro, shear_rate, time_step, N_steps, period_dump, prep_steps = pickle.load(param_file)

prep_frames = math.ceil(prep_steps/period_dump) # number of preparation frames

Ncases = int(eval(os.environ['N_CASES'])) if 'N_CASES' in os.environ else int(np.sqrt(N)) + (1 - int(np.sqrt(N))%2) # number of cases in each direction to compute the velocity grid

Nentries = N_steps//period_dump # number of time snapshots in velocity and position files
init_frame = int(Nentries/2) if init_frame < 0 else init_frame # initial frame
Nframes = Nentries - init_frame # number of frames available for the calculation

dis_time = Nframes + dis_time if dis_time <= 0 else dis_time # length of the interval of time for which the correlation displacement is calculated

times = np.array(list(OrderedDict.fromkeys(map(lambda x: int(x), np.linspace(init_frame, Nentries - dis_time - 1, int_max))))) # frames at which to calculate the correlation displacement

# plot parameters

Cuu_min = float(eval(os.environ['CUU_MIN'])) if 'CUU_MIN' in os.environ else 1e-3
r_min = float(eval(os.environ['R_MIN'])) if 'R_MIN' in os.environ else 1
r_max = float(eval(os.environ['R_MAX'])) if 'R_MAX' in os.environ else 20

plot_axis = os.environ['AXIS'] if 'AXIS' in os.environ else 'LOGLOG'
fplot = lambda ax: ax.loglog if plot_axis == 'LOGLOG' else ax.semilogy if plot_axis == 'LINLOG' else ax.semilogx if plot_axis == 'LOGLIN' else ax.plot

def displacement_grid(Ncases, N, L, time, dis_time, prep_frames, wrap_file, unwrap_file):
	# This function associates a Ncases x Ncases grid to the box and calculates the average
	# displacement over time dis_time from time time in every cases.

	dL = L/Ncases

	w_traj = gsd.hoomd.HOOMDTrajectory(wrap_file);
	pos = w_traj[int(prep_frames + time + dis_time)].particles.position[:, :2] # position at time time + dis_time (with boundary conditions)
	index = np.array((pos + L/2)//dL, dtype=int) # 2D index of every particles

	pos0 = getarray(unwrap_file, N, time) # positions at time time (without periodic boundary conditions)
	pos1 = getarray(unwrap_file, N, time + dis_time) # position at time time + dis_time (without periodic boundary conditions)
	displacement = pos1 - pos0 # displacements of the particles between time and time + dis_time

	ugrid_dic = {}
	for particle in range(N):
		if (index[particle] < Ncases).all():
			ugrid_dic[tuple(index[particle])] = ugrid_dic[tuple(index[particle])] + [displacement[particle]] if tuple(index[particle]) in ugrid_dic else [displacement[particle]]

	ugrid = np.zeros((Ncases, Ncases, 2))
	for index in ugrid_dic:
		ugrid[index] = np.mean(ugrid_dic[index], axis=0)

	return ugrid

def Cuu2D_time(Ncases, N, L, time, dis_time, prep_frames, wrap_file, unwrap_file):
	# This function returns the 2D correlation plot and renormalisation term of the
	# displacement grid calculated by displacement_grid.

	ugrid = displacement_grid(Ncases, N, L, time, dis_time, prep_frames, wrap_file, unwrap_file) # displacement grid
	ngrid = (ugrid != 0).any(axis=-1)*1 # density grid
	rho = np.sum(ngrid)/(Ncases**2)

	FFTugrid = np.fft.fft2(ugrid, axes=(-3, -2))
	FFTuxgrid = FFTugrid[:, :, 0]
	FFTuygrid = FFTugrid[:, :, 1]
	Cuu = np.real(np.fft.ifft2(np.conj(FFTuxgrid)*FFTuxgrid)) + np.real(np.fft.ifft2(np.conj(FFTuygrid)*FFTuygrid)) # velocity auto-correlation
	Cuu_Norm = (Ncases**2) * np.sum(np.mean(ugrid**2, axis=(0,1))) # normalisation term

	FFTngrid = np.fft.fft2(ngrid)
	G = np.real(np.fft.ifft2(np.conj(FFTngrid)*FFTngrid))/((np.sum(ngrid)/Ncases)**2) # density auto-correlation grid

	return Cuu, Cuu_Norm, G, rho

with gsd.pygsd.GSDFile(open(wrap_file_name, 'rb')) as wrap_file, open(unwrap_file_name, 'rb') as unwrap_file:
	Cuu2D, G2D, rho = (lambda list: (list[0]/list[1], list[2]/len(times), list[3]/len(times)))(np.sum(list(map(lambda time: Cuu2D_time(Ncases, N, box_size, time, dis_time, prep_frames, wrap_file, unwrap_file), times)), axis=0)) # 2D correlation plot of the displacement

Cuu1D_dic, g1D_dic = {}, {}
for i in range(Ncases):
	for j in range(Ncases):
		if (i**2 + j**2) <= (Ncases/2)**2:
			Cuu1D_dic[int(i**2 + j**2)] = Cuu1D_dic[int(i**2 + j**2)] + [Cuu2D[i, j]] if int(i**2 + j**2) in Cuu1D_dic else [Cuu2D[i, j]]
			g1D_dic[int(i**2 + j**2)] = [0] if int(i**2 + j**2) == 0 else g1D_dic[int(i**2 + j**2)] + [G2D[i, j]] if int(i**2 + j**2) in g1D_dic else [G2D[i, j]]
Cuu1D = np.array(list(map(lambda dist: [np.sqrt(dist)*(box_size/Ncases), np.mean(Cuu1D_dic[dist])], sorted(Cuu1D_dic))))
g1D = np.array(list(map(lambda dist: [np.sqrt(dist)*(box_size/Ncases), np.mean(g1D_dic[dist])], sorted(g1D_dic))))

# SAVING

Cuu_filename = data_dir + str('/Cuu_D%s_V%s_R%s_N%s_I%s_T%s_M%s_C%s.pickle' % tuple(map(float_to_letters, [density, vzero, dr, N, init_frame, dis_time, int_max, Ncases]))) # Cuu file name
g_filename = data_dir + str('/g_D%s_V%s_R%s_N%s_I%s_T%s_M%s_C%s.pickle' % tuple(map(float_to_letters, [density, vzero, dr, N, init_frame, dis_time, int_max, Ncases]))) # Cuu file name
with open(Cuu_filename, 'wb') as Cuu_dump_file, open(g_filename, 'wb') as g_dump_file:
	pickle.dump([Cuu2D, Cuu1D], Cuu_dump_file)
	pickle.dump([G2D, g1D, rho], g_dump_file)

# PLOT

if 'SHOW' in os.environ and eval(os.environ['SHOW']):
	import matplotlib as mpl
	import matplotlib.pyplot as plt
	import matplotlib.colors as colors
	import matplotlib.cm as cmx
	from mpl_toolkits.axes_grid1 import make_axes_locatable
	from matplotlib.gridspec import GridSpec

	cmap = plt.cm.jet
	fig, axs = plt.subplots(2, 2)

	fig.set_size_inches(16, 16)
	fig.subplots_adjust(wspace=0.3)
	fig.subplots_adjust(hspace=0.3)

	fig.suptitle(r'$N=%.2e, \phi=%1.2f, \tilde{v}=%.2e, \tilde{\nu}_r=%.2e$' % (N, density, vzero, dr) + '\n' + r'$S_{init}=%.2e, \Delta t=%.2e, S_{max}=%.2e, N_{cases}=%.2e$' % (init_frame, dis_time*period_dump*time_step, int_max, Ncases))

	# Cuu

	Cuumin = 0 if np.min(Cuu2D) > 0 else np.min(Cuu2D)
	Cuumax = np.max(Cuu2D)

	CuuvNorm = colors.Normalize(vmin=Cuumin, vmax=Cuumax)
	CuuscalarMap = cmx.ScalarMappable(norm=CuuvNorm, cmap=cmap) 

	axs[0, 0].imshow(np.roll(np.roll(Cuu2D, int(Ncases/2), axis=0), int(Ncases/2), axis=1), cmap=cmap, norm=CuuvNorm)

	axs[0, 0].set_xlabel(r'$x$')
	axs[0, 0].set_ylabel(r'$y$')
	axs[0, 0].set_title('2D ' + r'$C_{uu}$')

	divider = make_axes_locatable(axs[0, 0])
	cax = divider.append_axes("right", size="5%", pad=0.05)
	cb = mpl.colorbar.ColorbarBase(cax, cmap=cmap, norm=CuuvNorm, orientation='vertical')

	fplot(axs[1, 0])(Cuu1D[1:, 0], Cuu1D[1:, 1])

	axs[1, 0].set_xlabel(r'$r$')
	axs[1, 0].set_ylabel(r'$C_{uu}$')
	axs[1, 0].set_title('radial ' + r'$C_{uu}$')

	axs[1, 0].set_xlim(r_min, r_max)
	axs[1, 0].set_ylim(Cuu_min, 1)

	# g

	axs[0, 1].plot(g1D[1:, 0], g1D[1:, 1])

	axs[0, 1].set_xlabel(r'$r$')
	axs[0, 1].set_ylabel(r'$g$')
	axs[0, 1].set_title('radial ' + r'$g$')

	axs[0, 1].set_xlim(r_min, r_max)

	fplot(axs[1, 1])(Cuu1D[1:, 0], Cuu1D[1:, 1]/(rho*g1D[1:, 1]))

	axs[1, 1].set_xlabel(r'$r$')
	axs[1, 1].set_ylabel(r'$C_{uu}/\rho g$')
	axs[1, 1].set_title('radial ' + r'$C_{uu}/\rho g$')

	axs[1, 1].set_xlim(r_min, r_max)
	axs[1, 1].set_ylim(Cuu_min, 1)

	plt.show()
