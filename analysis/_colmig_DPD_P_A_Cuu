#! /home/yketa/miniconda3/bin/python3.6

import os

import numpy as np

import pickle

dis_time = int(eval(os.environ['TIME'])) if 'TIME' in os.environ else -1 # time interval for the displacement

vel_file = os.environ['VELOCITY_FILE'] if 'VELOCITY_FILE' in os.environ else 'velocity.csv' # velocity file
pos_file = os.environ['POSITION_FILE'] if 'POSITION_FILE' in os.environ else 'position.csv' # position file
param_file = os.environ['PARAMETERS_FILE'] if 'PARAMETERS_FILE' in os.environ else 'param.pickle' # parameters file

file = open(param_file, 'rb')
N, a, pdi, N_sizes, density, box_size, kT, mu, k, vzero, dr, damp_bro, shear_rate, time_step, N_steps, period_dump, prep_steps = pickle.load(file)
file.close()
dis_time = N_steps//period_dump - 1 if dis_time <= 0 else dis_time

Ncases = int(eval(os.environ['N_CASES'])) if 'N_CASES' in os.environ else int(np.sqrt(N)) + (1 - int(np.sqrt(N))%2) # number of cases in each direction to compute the velocity grid

data_vel = np.genfromtxt(fname=vel_file, delimiter=',') # positions and velocities
data_pos = np.genfromtxt(fname=pos_file, delimiter=',') # positions without periodic boundary conditions

def displacement_grid(Ncases, L, time, dis_time, data_vel, data_pos):
	# This function associates a Ncases x Ncases to the box and calculates the average
	# displacement over time dis_time from time time in every cases.

	dL = L/Ncases

	pos_per = lambda time, particle: data_vel[time, particle*3:particle*3 + 2] # position with periodic boundary condition
	pos = lambda time, particle: data_pos[time, particle*2:particle*2 + 2] # position without periodic boundary condition

	ugrid_dic = {}
	for particle in range(N):
		index = (pos_per(time + dis_time, particle) + L/2)//dL
		index = (int(index[0]), int(index[1]))

		displacement = pos(time + dis_time, particle) - pos(time, particle)
		ugrid_dic[index] = ugrid_dic[index] + [displacement] if index in ugrid_dic else [displacement]

	ugrid = np.zeros((Ncases, Ncases, 2))
	for index in ugrid_dic:
		ugrid[index] = np.mean(ugrid_dic[index], axis=0)

	return ugrid

def Cuu2D_time(Ncases, L, time, dis_time, data_vel, data_pos):
	# This function returns the 2D correlation plot and renormalisation term of the
	# displacement grid calculated by displacement_grid.

	ugrid = displacement_grid(Ncases, L, time, dis_time, data_vel, data_pos) # displacement grid

	FFTugrid = np.fft.fft2(ugrid, axes=(-3, -2))
	FFTuxgrid = FFTugrid[:, :, 0]
	FFTuygrid = FFTugrid[:, :, 1]
	Cuu = np.real(np.fft.ifft2(np.conj(FFTuxgrid)*FFTuxgrid)) + np.real(np.fft.ifft2(np.conj(FFTuygrid)*FFTuygrid)) # velocity auto-correlation
	Norm = (Ncases**2) * np.sum(np.mean(ugrid**2, axis=(0,1))) # normalisation term

	return Cuu, Norm

Cuu2D = (lambda list: list[0]/list[1])(np.sum(list(map(lambda time: Cuu2D_time(Ncases, L, time, dis_time, data_vel, data_pos), range(N_steps//period_dump - dis_time))), axis=0)) # 2D correlation plot of the displacement

Cuu1D_dic = {}
for i in range(Cuu2D.shape[0]):
	for j in range(Cuu2D.shape[1]):
		if (i**2 + j**2) <= (Ncases/2)**2:
			Cuu1D_dic[int(i**2 + j**2)] = Cuu1D_dic[int(i**2 + j**2)] + [Cuu2D[i, j]] if int(i**2 + j**2) in Cuu1D_dic else [Cuu2D[i, j]]
Cuu1D = np.array(list(map(lambda dist: [np.sqrt(dist)*(box_size/Ncases), np.mean(Cuu1D_dic[dist])], sorted(Cuu1D_dic))))

# PLOT

import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import matplotlib.cm as cmx
from mpl_toolkits.axes_grid1 import make_axes_locatable

cmap = plt.cm.jet

Cuumin = 0
Cuumax = np.max(Cuu2D)

fig, axs = plt.subplots(1, 2)
vNorm = colors.Normalize(vmin=Cuumin, vmax=Cuumax)
scalarMap = cmx.ScalarMappable(norm=vNorm, cmap=cmap) 

axs[0].imshow(np.roll(np.roll(Cuu2D, int(Ncases/2), axis=0), int(Ncases/2), axis=1), cmap=cmap, norm=vNorm)

axs[0].set_xlabel('x')
axs[0].set_ylabel('y')
axs[0].set_title('2D C_uu')

divider = make_axes_locatable(axs[0])
cax = divider.append_axes("right", size="5%", pad=0.05)
cb = mpl.colorbar.ColorbarBase(cax, cmap=cmap, norm=vNorm, orientation='vertical')

axs[1].semilogy(Cuu1D[:, 0], Cuu1D[:, 1])

axs[1].set_xlabel('r')
axs[1].set_ylabel('C_uu')
axs[1].set_title('radial C_uu')

fig.subplots_adjust(wspace=0.6)

plt.show()
